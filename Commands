setting:
    -name
    -email
    -default editor
    -line ending
    * on three levels:
        -system: all users
        -global: all repositories of the current user
        -local: the current repository

    git config --global user.name "user name"
    git config --global user.email "user enail"
    git config --global core.editor "code --wait" // to use vscode as a default editor
    git config --global -e // to open config file and edit global setting
    git config --global core.autocrlf ___ ('true' is you use windows and 'input' if you use mac or linux)
    - to show diff using vscode:
        git config --global diff.tool vscode
        git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE" // $LOCAL $REMOTE are the placeholder for the old and new copies of a file
        after execute these command make sure that all the settings set properly by open .gitconfig file using git config --global -e command 
        after that you can see the changes using : git difftool instead of git diff 
                                                   git difftool // showes the changes in files in working directory (compared to copy in staging area) 
                                                   git difftool --staged //or --cached //showes the changes in staging area (compared to copy in gitrepository area)
        to show the diff between main or master branch and another branch use: git difftool branch-name
    to search on other settings just type "git config" in google and go to the documentation of this command or using this command "git config --help"
                                                                                                    or "git config -h" to get the summary of documenation
----------------
add and commit:

make some modification on the files or create new one or delete one.
git add . or git add file1.py // add and save changes to stage area.
git commit -m "a message" // save changes to the git repository
or you can use the two last command at once by: git commit -am "a message" , a for add and m for message. But is there a new created file
 you can't use this command
----------------

git status //show the status of the project in git
git status -s summury of status 
    the result has two culumns for each file 
    left column: the change in the staging area (green color)
    right column: the change in working directory (red color)

git log //show all commits
git ls-tree HEAD // to display the files and directories in specific commit , blob means a file and tree means a directory
git show git_object // where git_object can be: [commit,blob,tree,tag]

------
restore:
wd -> working directory
sa -> staging area 
gr -> git repository

file1 in wd and in sa and not in gr(meaning it is new file) -> git restore file1 -> nothing will happen
file1 in wd and in sa but not in gr -> git restore file1 -> will replace the copy in wd with the copy in sa &&&& git restore --staged file1 -> the copy
         in the sa just will be removed  (unstaged)
file1 in wd and in sa and in gr -> git restore file1 -> will replace the copy in wd with the copy in sa &&&& git restore --staged file1 -> remove 
         the copy in sa

file1 in wd and in gr -> git restore file1 -> git restore file1 -> will replace the copy in wd with the copy in gr (discard latest changes those aren't
         commite) &&&& git restore --staged file1 -> will do nothing
in summary: 
         use "git restore <file>..." to discard changes in working directory and revert the file to the latest changes in sa or gr
         use "git restore --staged <file>..." to unstage 

------
git rebase:

to remove the commit on your local repository. You can do this using:
     git rebase -i
For example, if it's your last commit, you can do:
     git rebase -i HEAD~2 
 and delete the second line within the editor window that pops up
Then, force push to GitHub by using:
     git push origin +branchName --force
 and if your working tree is dirty, you have to do a git stash first, and then a git stash apply after
------
git remote:
Add remote server to Git:
    git remote add [<options>] <name> <url>
        name: the name of remote. it is often set to 'origin'
        url: the url of your repository
    git remote remove <name> //if we want to remove a remote

    note: don't use https url, use ssh url instead. if you use https url the 'git push' command will require username and the password of your github account
            and knowing if you provide your password, it will give an error (error number 1).
    
    now if we want to push to remote repository:
        -first create a repository in your account without adding anything (the name is not necessary to be the same as the folder name in which
                                                  the .git folder is located).
        -git branch -M main
        -git remote add <name> <ssh url of your repository>
        -git push -u <name of remote(origin)> <branch name (main)>
    to show the list of all remote repositories use:
        -git remote -v
        
------
SSH Key:

https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

* Generate ssh key to use it with git:
ssh-keygen -t rsa -b 4096 -C "email@address.com" // -t encryption type, -b length, -C email address

* Adding ssh key to the ssh-agent:
    eval "$(ssh-agent -s)"
    ssh-add /path/to/your/private_key

* if you work with two github account and each of two account have separate ssh key(normally, every key is used just once) so you have to
  switch between the two ssh key every time you want to deal or work with an account other than the current account one you work with.
  for x account that has x_ssh_key:
        eval "$(ssh-agent -s)"
        ssh-add /path/to/x_ssh_key
  for y account that has y_ssh_key:
        eval "$(ssh-agent -s)"
        ssh-add /path/to/y_ssh_key

-------
Branching and Mergin:


Hot Fix Branche                                                      _commit1_
                                                                    /         \
Master Branch------#commit1#------#commit2#------#commit3#------#commit4#-----#merg#------merg
                                                         \                               /
Feature Branch                                            \___#commit1#___#commit2#_____/
                                                        
- to work in a team and each one works on a separate branch (separate part of a project).
- to work on fixng an error in the code so we can create new branch and work on it and in the end we merg it with master branch.
- when working on adding a new feature.

- git branch // to show all branches and the one with * it means that you work in this branch.
- git checkout -b branch-name // to create a branch named branch-name and switch to the new branch
- or you can use : git branch branch-name // this will create a new branch but if you want to switch to it you have to use the command below.
- git checkout wnated-branch // to switch between branches
- git branch -d branch-name // delete branch named branch-name after merging it
- git branch -D branch-name //delete branch named branch-name before merging it 
note: don't switch between branches if there are some changes those are not commited, so first commit all changes then switch to another branch.

All steps for branching and merging:
    1- create new branch and switch to it:
        git branch branch-name //create
        git checkout branch-name //switch
        or two command in one: git checkout -b branch-name
    2- now you are in the new branch you can work on it as you worked on main or master branch before.
        make some modifications on code.
        git add..
        git commit..
    3- pushing the code to remote repository.
        git push origin branch-name 
    4- create pull request(PR): now after push the code by a new branch we need to 
        create  a request to the owner to merge the modifications with the master or the main branch, this is called Pull Request.
        - go to the github repositort and click (Compare & pull request).
        - select the brnach that you want to merge it(branch-name) and the branch that you want to merge into it(master or main), and leave a comment.
        - and click (Create pull request)
        - and now you can review the changes and add any comment to any line of changed code to tell who create the new branch to edit something 
        and he can edit and make commit and push again and after see that everything is ok, move to the next step.
        -finally click (Merge pull request).
    5- in the local machine switch to the main or the master branch.
        git checkout main.
    6- delete the new branch.
        git branch -d branch-name.
    7- you will notice that the modifications those are made are not in the main branch in the local machine because all changes made in online or
        remote repository so you need to pull the changes and modifications to the local machine.
        git pull.

Merging locally:
this is not the regular way to do merging but this uses when we want to keep a branch up to date with another branch because maybe while
 you are make changes on you branch(branch1), also the others make chnages to the main branch that you create a new branch from it(main)
 so you want to keep up to date with the changes on the main branch (main->branch1) so you can use this steps:
    - in your branch (branch1):
        git merge main // means bring all the changes on main branch and merge with this branch(branch1)
and if you want to merge the branch1 with the main branch (branch1->main):
    - git checkout main
    - git merge branch1 //bring all changes in the branch1 and merge them eith the main branch.

---------------------------
forking:
we can use forking when we want to contribute to an open source project.
when you fork a repository it will be completely copied to your github account and you can work on it as any repository on your account.
after finishing modification you can send a pull request to the original repository to merge or add your modification to the project.
steps:
- go to the project in github you want to contribute.
- click (fork) button 
- click (create fork)
- and now the repository was copied to your account you can treat them as any repository in your account.
- after finishing from modifications you can send a pull request to the original owner to merge your modifcation.

---------------------------
conflicts:
    for example, if there a new line in the same line number, git won't know how to merge automatically so when you merge two branch those
    contain some conflicts it will give you an error and if you use nice editor like vscode it will open a tab with indicating to the conflicts
    means where is there conflict so you can reslove them manually and then do (git add....) and (git commit....) then it will be merged.



------------------------------------------------------------
GitIgnore:
A .gitignore file is used to specify files or directories that should be ignored by Git when tracking changes in a project. It helps avoid including unnecessary files, such as compiled binaries, temporary files, or sensitive information, in the Git repository.
To create a .gitignore file, follow these steps:
1- Open a text editor in the root directory of your Git repository.

2- Create a new file and save it as .gitignore (note the leading dot).

3- Add rules to the .gitignore file, each specifying a pattern for files or directories to ignore. Here are some examples:
	Ignore a specific file: myfile.txt
	Ignore files with a specific extension: *.log (ignores all files with the .log extension)
	Ignore files in a specific directory: mydir/ (ignores all files and directories inside mydir/)
	Ignore all files in a directory and its subdirectories: mydir/* (ignores all files but not the directory itself)
	Ignore a Folder : mydir/
	You can include multiple rules in the file, each on a separate line.
4- Save the .gitignore file. 
Here's how you can use git check-ignore:

1-Open a terminal or command prompt.

2- Navigate to the root directory of your Git repository.

3- Run the following command, replacing <file> or <directory> with the path to the file or directory you want to check:

git check-ignore -v <file or directory>
```

For example, to check if a file named `myfile.txt` would be ignored, you can use:

````bash
git check-ignore -v myfile.txt
```

If you want to check if an entire directory named `myfolder` would be ignored, use:

````bash
git check-ignore -v myfolder
```
--------------------------------------------------------------
git rm

The git rm command is used in Git to remove files from both the working directory and the Git repository. It is typically used to stage the removal of files so that the changes can be committed.

Here are a few common use cases and options for the git rm command:

1- Remove a file from the working directory and the repository:

	git rm <file>
		This command removes the specified `<file>` from the working directory and stages
		the removal for the next commit. The file will be permanently deleted from both 
		the working directory and the Git repository history after committing.

2- Remove a file from the repository but keep it in the working directory:
	
	git rm --cached <file>

		The `--cached` option removes the specified `<file>` from the Git repository,
		but keeps it in the working directory. This is useful when you want to stop 
		tracking a file without deleting it.

3- Remove a directory and its contents:

	git rm -r <directory>

		The `-r` option (or `--recursive`) is used to recursively remove a directory and
		its contents from the working directory and the repository. It will stage the
		removal of all files and subdirectories within `<directory>`.

4- Force removal of files:

	git rm -f <file>

		The `-f` option (or `--force`) forces the removal of a file,
		even if it is modified or has local changes that have not 
		been committed yet. Use this option with caution as it irreversibly removes the file.
---------------------------
                        *******ERRORS*******
1-
    remote: Support for password authentication was removed on August 13, 2021.
    remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
    fatal: Authentication failed for 'https://github.com/hasanosman601/GitHub-Tutorial.git/'

    solving:
            When you git clone, git fetch, git pull, or git push to a remote repository using HTTPS URLs on the command line, Git will ask for your GitHub username and password. When Git prompts you for your password, enter your personal access token.

---------------------------
Hiiiiii this is dome modification just to test and learn branching and this modification had been made by branch-1 branch

adding conflict1
git conflict2












